{"version":3,"sources":["../../../src/main/ast/func.js"],"names":["Function","name","parameters","returnType","body","override","isPrivate","method","length","i","type","sign","parametersCount","identifier","Types","Unit","Definition"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;IAEaA,Q,WAAAA,Q;;;AAET,sBAAYC,IAAZ,EAA0F;AAAA,YAAxEC,UAAwE,uEAA3D,EAA2D;AAAA,YAAvDC,UAAuD;AAAA,YAA3CC,IAA2C;AAAA,YAArCC,QAAqC,uEAA1B,KAA0B;AAAA,YAAnBC,SAAmB,uEAAP,KAAO;;AAAA;;AAAA;;AAGtF,cAAKL,IAAL,GAAYA,IAAZ;AACA,cAAKC,UAAL,GAAkBA,UAAlB;AACA,cAAKC,UAAL,GAAkBA,UAAlB;AACA,cAAKC,IAAL,GAAYA,IAAZ;AACA,cAAKC,QAAL,GAAgBA,QAAhB;AACA,cAAKC,SAAL,GAAiBA,SAAjB;AARsF;AASzF;;;;qCAEY;AACT,mBAAO,IAAP;AACH;;;+BAEMC,M,EAAQ;AACX,gBAAI,KAAKN,IAAL,KAAcM,OAAON,IAAzB,EAA+B;AAC3B,uBAAO,KAAP;AACH;;AAED,gBAAI,KAAKC,UAAL,CAAgBM,MAAhB,KAA2BD,OAAOL,UAAP,CAAkBM,MAAjD,EAAyD;AACrD,uBAAO,KAAP;AACH;;AAED,iBAAK,IAAIC,IAAI,CAAR,EAAWD,SAAS,KAAKN,UAAL,CAAgBM,MAAzC,EAAiDC,IAAID,MAArD,EAA6D,EAAEC,CAA/D,EAAkE;AAC9D,oBAAI,KAAKP,UAAL,CAAgBO,CAAhB,EAAmBC,IAAnB,KAA4BH,OAAOL,UAAP,CAAkBO,CAAlB,EAAqBC,IAArD,EAA2D;AACvD,2BAAO,KAAP;AACH;AACJ;;AAED,gBAAI,KAAKP,UAAL,KAAoBI,OAAOJ,UAA/B,EAA2C;AACvC,uBAAO,KAAP;AACH;;AAED,mBAAO,IAAP;AACH;;;oCAEW;AACR,gBAAIQ,OAAO,KAAKV,IAAL,GAAY,GAAvB;AACA,gBAAIW,kBAAkB,KAAKV,UAAL,CAAgBM,MAAtC;;AAEA,gBAAII,kBAAkB,CAAtB,EAAyB;AACrBD,wBAAQ,KAAKT,UAAL,CAAgB,CAAhB,EAAmBW,UAAnB,GAAgC,IAAhC,GAAuC,KAAKX,UAAL,CAAgB,CAAhB,EAAmBQ,IAAlE;;AAEA,qBAAK,IAAID,IAAI,CAAb,EAAgBA,IAAIG,eAApB,EAAqC,EAAEH,CAAvC,EAA0C;AACtCE,4BAAQ,OAAO,KAAKT,UAAL,CAAgBO,CAAhB,EAAmBI,UAA1B,GAAuC,IAAvC,GAA8C,KAAKX,UAAL,CAAgBO,CAAhB,EAAmBC,IAAzE;AACH;AACJ;;AAEDC,oBAAQ,GAAR;;AAEA,gBAAI,KAAKR,UAAL,KAAoBW,aAAMC,IAA9B,EAAoC;AAChCJ,wBAAQ,OAAO,KAAKR,UAApB;AACH;;AAED,mBAAOQ,IAAP;AACH;;;;EA1DyBK,sB","file":"func.js","sourcesContent":["import { Definition } from './definition'\nimport { Types } from '../types/types'\n\nexport class Function extends Definition {\n\n    constructor(name, parameters = [], returnType, body, override = false, isPrivate = false) {\n        super();\n\n        this.name = name;\n        this.parameters = parameters;\n        this.returnType = returnType;\n        this.body = body;\n        this.override = override;\n        this.isPrivate = isPrivate;\n    }\n\n    isFunction() {\n        return true;\n    }\n\n    equals(method) {\n        if (this.name !== method.name) {\n            return false;\n        }\n\n        if (this.parameters.length !== method.parameters.length) {\n            return false;\n        }\n\n        for (let i = 0, length = this.parameters.length; i < length; ++i) {\n            if (this.parameters[i].type !== method.parameters[i].type) {\n                return false;\n            }\n        }\n\n        if (this.returnType !== method.returnType) {\n            return false;\n        }\n\n        return true;\n    }\n\n    signature() {\n        let sign = this.name + '(';\n        let parametersCount = this.parameters.length;\n\n        if (parametersCount > 0) {\n            sign += this.parameters[0].identifier + ': ' + this.parameters[0].type;\n\n            for (let i = 1; i < parametersCount; ++i) {\n                sign += ', ' + this.parameters[i].identifier + ': ' + this.parameters[i].type;\n            }\n        }\n\n        sign += ')';\n\n        if (this.returnType !== Types.Unit) {\n            sign += ': ' + this.returnType;\n        }\n\n        return sign;\n    }\n}"]}