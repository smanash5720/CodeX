{"version":3,"sources":["../../../src/main/ast/expression.js"],"names":["Expression","line","column","expressionType","undefined","AstNode"],"mappings":";;;;;;;;;AAAA;;;;;;;;IAEaA,U,WAAAA,U;;;AAET,0BAAc;AAAA;;AAAA;;AAGV,cAAKC,IAAL,GAAY,CAAC,CAAb;AACA,cAAKC,MAAL,GAAc,CAAC,CAAf;AACA,cAAKC,cAAL,GAAsBC,SAAtB;AALU;AAMb;;;;kCAES;AACN,mBAAO,KAAKD,cAAL,KAAwBC,SAA/B;AACH;;;uCAEc;AACX,mBAAO,IAAP;AACH;;;uCAEc;AACX,mBAAO,KAAP;AACH;;;6CAEoB;AACjB,mBAAO,KAAP;AACH;;;kCAES;AACN,mBAAO,KAAP;AACH;;;2CAEkB;AACf,mBAAO,KAAP;AACH;;;iCAEQ;AACL,mBAAO,KAAP;AACH;;;4CAEmB;AAChB,mBAAO,KAAP;AACH;;;2CAEkB;AACf,mBAAO,KAAP;AACH;;;yCAEgB;AACb,mBAAO,KAAP;AACH;;;mCAEU;AACP,mBAAO,KAAP;AACH;;;2CAEkB;AACf,mBAAO,KAAP;AACH;;;2CAEkB;AACf,mBAAO,KAAP;AACH;;;iCAEQ;AACL,mBAAO,KAAP;AACH;;;gCAEO;AACJ,mBAAO,KAAP;AACH;;;mCAEU;AACP,mBAAO,KAAP;AACH;;;wCAEe;AACZ,mBAAO,KAAP;AACH;;;sCAEa;AACV,mBAAO,KAAP;AACH;;;0CAEiB;AACd,mBAAO,KAAP;AACH;;;kCAES;AACN,mBAAO,KAAP;AACH;;;iCAEQ;AACL,mBAAO,KAAP;AACH;;;4CAEmB;AAChB,mBAAO,KAAP;AACH;;;kCAES;AACN,mBAAO,KAAP;AACH;;;;EApG2BC,gB","file":"expression.js","sourcesContent":["import { AstNode } from './astnode'\n\nexport class Expression extends AstNode {\n\n    constructor() {\n        super();\n\n        this.line = -1;\n        this.column = -1;\n        this.expressionType = undefined;\n    }\n\n    hasType() {\n        return this.expressionType !== undefined;\n    }\n\n    isExpression() {\n        return true;\n    }\n\n    isAssignment() {\n        return false;\n    }\n\n    isBinaryExpression() {\n        return false;\n    }\n\n    isBlock() {\n        return false;\n    }\n\n    isBooleanLiteral() {\n        return false;\n    }\n\n    isCast() {\n        return false;\n    }\n\n    isConstructorCall() {\n        return false;\n    }\n\n    isDecimalLiteral() {\n        return false;\n    }\n\n    isFunctionCall() {\n        return false;\n    }\n\n    isIfElse() {\n        return false;\n    }\n\n    isInitialization() {\n        return false;\n    }\n\n    isIntegerLiteral() {\n        return false;\n    }\n\n    isLazy() {\n        return false;\n    }\n\n    isLet() {\n        return false;\n    }\n\n    isNative() {\n        return false;\n    }\n\n    isNullLiteral() {\n        return false;\n    }\n\n    isReference() {\n        return false;\n    }\n\n    isStringLiteral() {\n        return false;\n    }\n\n    isSuper() {\n        return false;\n    }\n\n    isThis() {\n        return false;\n    }\n\n    isUnaryExpression() {\n        return false;\n    }\n\n    isWhile() {\n        return false;\n    }\n}"]}