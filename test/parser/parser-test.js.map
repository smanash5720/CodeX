{"version":3,"sources":["../../../src/test/parser/parser-test.js"],"names":["assert","describe","it","parser","Parser","expression","parseExpression","equal","isIntegerLiteral","value","isDecimalLiteral","isStringLiteral","isNullLiteral","isBooleanLiteral","isBinaryExpression","operator","left","right","multiplication","isIfElse","thenBranch","elseBranch","isWhile","condition","body","isLet","initializations","length","identifier","type","undefined","isReference","isThis","isBlock","expressions","isConstructorCall","args","isUnaryExpression","isFunctionCall","object","functionName","func","parseFunction","isFunction","name","parameters","returnType","klass","parseClass","variables","properties","functions","override","program","parseProgram","classesCount","fraction","classes","fractionParameters","fractionVariables","fractionFunctions","complex","complexParameters","complexVariables","complexFunctions"],"mappings":"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","file":"parser-test.js","sourcesContent":["import * as assert from 'assert'\nimport { Expression } from '../../main/ast/expression'\nimport { Parser } from '../../main/parser/parser'\n\ndescribe('Parser', () => {\n\n    describe('#parseExpression', () => {\n\n        it('should parse a simple integer literal', () => {\n            let parser = new Parser('42');\n\n            let expression = parser.parseExpression();\n\n            assert.equal(true, expression.isIntegerLiteral());\n            assert.equal('42', expression.value);\n        });\n\n        it('should parse a simple decimal literal', () => {\n            let parser = new Parser('3.14159');\n\n            let expression = parser.parseExpression();\n\n            assert.equal(true, expression.isDecimalLiteral());\n            assert.equal('3.14159', expression.value);\n        });\n\n        it('should parse a simple string literal', () => {\n            let parser = new Parser('\"Hello, World!\"');\n\n            let expression = parser.parseExpression();\n\n            assert.equal(true, expression.isStringLiteral());\n            assert.equal('\"Hello, World!\"', expression.value);\n        });\n\n        it('should parse a null literal', () => {\n            let parser = new Parser('null');\n\n            let expression = parser.parseExpression();\n\n            assert.equal(true, expression.isNullLiteral());\n        });\n\n        it('should parse the boolean literal \"true\"', () => {\n            let parser = new Parser('true');\n\n            let expression = parser.parseExpression();\n\n            assert.equal(true, expression.isBooleanLiteral());\n            assert.equal('true', expression.value);\n        });\n\n        it('should parse the boolean literal \"false\"', () => {\n            let parser = new Parser('false');\n\n            let expression = parser.parseExpression();\n\n            assert.equal(true, expression.isBooleanLiteral());\n            assert.equal('false', expression.value);\n        });\n\n        it('should parse a simple addition', () => {\n            let parser = new Parser('1 + 2');\n\n            let expression = parser.parseExpression();\n\n            assert.equal(true, expression.isBinaryExpression());\n\n            assert.equal('+', expression.operator);\n\n            assert.equal(true, expression.left.isIntegerLiteral());\n            assert.equal('1', expression.left.value);\n\n            assert.equal(true, expression.right.isIntegerLiteral());\n            assert.equal('2', expression.right.value);\n        });\n\n        it('should correctly handle left associativity for arithmetic operators', () => {\n            let parser = new Parser('7 - 4 + 2');\n\n            let expression = parser.parseExpression();\n\n            assert.equal(true, expression.isBinaryExpression());\n\n            assert.equal('+', expression.operator);\n\n            assert.equal(true, expression.left.isBinaryExpression());\n\n            assert.equal('-', expression.left.operator);\n\n            assert.equal(true, expression.left.left.isIntegerLiteral());\n            assert.equal('7', expression.left.left.value);\n\n            assert.equal(true, expression.left.right.isIntegerLiteral());\n            assert.equal('4', expression.left.right.value);\n\n            assert.equal(true, expression.right.isIntegerLiteral());\n            assert.equal('2', expression.right.value);\n        });\n\n        it('should correctly handle operator precedence', () => {\n            let parser = new Parser('1 + 3 * 5 - 8');\n\n            let expression = parser.parseExpression();\n\n            assert.equal(true, expression.isBinaryExpression());\n            assert.equal('-', expression.operator);\n\n            let left = expression.left;\n\n            assert.equal(true, left.isBinaryExpression());\n            assert.equal('+', left.operator);\n            assert.equal(true, left.left.isIntegerLiteral());\n            assert.equal('1', left.left.value);\n\n            let multiplication = left.right;\n\n            assert.equal(true, multiplication.isBinaryExpression());\n            assert.equal('*', multiplication.operator);\n            assert.equal(true, multiplication.left.isIntegerLiteral());\n            assert.equal('3', multiplication.left.value);\n            assert.equal(true, multiplication.right.isIntegerLiteral());\n            assert.equal('5', multiplication.right.value);\n\n            let right = expression.right;\n            assert.equal(true, right.isIntegerLiteral());\n            assert.equal('8', right.value);\n        });\n\n        it('should parse an if/else expression', () => {\n            let parser = new Parser('if (true) 1 else 2');\n\n            let expression = parser.parseExpression();\n\n            assert.equal(true, expression.isIfElse());\n\n            assert.equal(true, expression.thenBranch.isIntegerLiteral());\n            assert.equal('1', expression.thenBranch.value);\n\n            assert.equal(true, expression.elseBranch.isIntegerLiteral());\n            assert.equal('2', expression.elseBranch.value);\n        });\n\n        it('should parse a while expression', () => {\n            let parser = new Parser('while (true) 42');\n\n            let expression = parser.parseExpression();\n\n            assert.equal(true, expression.isWhile());\n\n            assert.equal(true, expression.condition.isBooleanLiteral());\n            assert.equal('true', expression.condition.value);\n\n            assert.equal(true, expression.body.isIntegerLiteral());\n            assert.equal('42', expression.body.value);\n        });\n\n        it('should parse a let expression', () => {\n            let parser = new Parser('let a: Int = 2, b = 3 in a + b');\n\n            let expression = parser.parseExpression();\n\n            assert.equal(true, expression.isLet());\n\n            let initializations = expression.initializations;\n            assert.equal(2, initializations.length);\n\n            assert.equal(initializations[0].identifier, 'a');\n            assert.equal(initializations[0].type, 'Int');\n            assert.equal(true, initializations[0].value.isIntegerLiteral());\n            assert.equal('2', initializations[0].value.value);\n\n            assert.equal(initializations[1].identifier, 'b');\n            assert.equal(initializations[1].type, undefined);\n            assert.equal(true, initializations[1].value.isIntegerLiteral());\n            assert.equal('3', initializations[1].value.value);\n\n            let body = expression.body;\n\n            assert.equal(true, body.isBinaryExpression());\n\n            assert.equal('+', body.operator);\n            assert.equal(true, body.left.isReference());\n            assert.equal('a', body.left.identifier);\n\n            assert.equal(true, body.right.isReference());\n            assert.equal('b', body.right.identifier);\n        });\n\n        it('should parse a this expression', () => {\n            var parser = new Parser('this');\n\n            var expression = parser.parseExpression();\n\n            assert.equal(true, expression.isThis());\n        });\n\n        it('should parse a block of expressions', () => {\n            var parser = new Parser('{\\n' +\n                   '\"hello\"\\n' +\n                   '42\\n' +\n                   'true\\n' +\n               '}');\n\n            var expression = parser.parseExpression();\n\n            assert.equal(true, expression.isBlock());\n\n            var expressions = expression.expressions;\n\n            assert.equal(3, expressions.length);\n\n            assert.equal(true, expressions[0].isStringLiteral());\n            assert.equal('\"hello\"', expressions[0].value);\n\n            assert.equal(true, expressions[1].isIntegerLiteral());\n            assert.equal('42', expressions[1].value);\n\n            assert.equal(true, expressions[2].isBooleanLiteral());\n            assert.equal('true', expressions[2].value);\n        });\n\n        it('should parse a constructor call', () => {\n            var parser = new Parser('new Integer(42)');\n\n            var expression = parser.parseExpression();\n\n            assert.equal(true, expression.isConstructorCall());\n            assert.equal('Integer', expression.type);\n            assert.equal(1, expression.args.length);\n            assert.equal(true, expression.args[0].isIntegerLiteral());\n            assert.equal('42', expression.args[0].value);\n        });\n\n        it('should parse a negative expression', () => {\n            var parser = new Parser('-42');\n\n            var expression = parser.parseExpression();\n\n            assert.equal(true, expression.isUnaryExpression());\n            assert.equal('-', expression.operator);\n\n            assert.equal(true, expression.expression.isIntegerLiteral());\n            assert.equal('42', expression.expression.value);\n        });\n\n        it('should parse a negated boolean expression', () => {\n            var parser = new Parser('!true');\n\n            var expression = parser.parseExpression();\n\n            assert.equal(true, expression.isUnaryExpression());\n            assert.equal('!', expression.operator);\n\n            assert.equal(true, expression.expression.isBooleanLiteral());\n            assert.equal('true', expression.expression.value);\n        });\n\n        it('should parse a parenthesized expression', () => {\n            var parser = new Parser('1 + (2 - 3.14)');\n\n            var expression = parser.parseExpression();\n\n            assert.equal(true, expression.isBinaryExpression());\n            assert.equal('+', expression.operator);\n\n            var left = expression.left;\n\n            assert.equal(true, left.isIntegerLiteral());\n            assert.equal('1', left.value);\n\n            var right = expression.right;\n\n            assert.equal(true, right.isBinaryExpression());\n            assert.equal('-', right.operator);\n            assert.equal(true, right.left.isIntegerLiteral());\n            assert.equal('2', right.left.value);\n            assert.equal(true, right.right.isDecimalLiteral());\n            assert.equal('3.14', right.right.value);\n        });\n\n        it('should parse a simple method call', () => {\n            var parser = new Parser('car.drive(2)');\n\n            var expression = parser.parseExpression();\n\n            assert.equal(true, expression.isFunctionCall());\n\n            var object = expression.object;\n            assert.equal(true, object.isReference());\n            assert.equal('car', object.identifier);\n\n            assert.equal(expression.functionName, 'drive');\n\n            assert.equal(1, expression.args.length);\n            assert.equal(true, expression.args[0].isIntegerLiteral());\n            assert.equal('2', expression.args[0].value);\n        });\n\n        it('should parse chain method calls', () => {\n            var parser = new Parser('node.add(42).push(\"Hello\")');\n\n            var expression = parser.parseExpression();\n\n            assert.equal(true, expression.isFunctionCall());\n\n            assert.equal(expression.functionName, 'push');\n\n            var object = expression.object;\n\n            assert.equal(true, object.isFunctionCall());\n            assert.equal('add', object.functionName);\n            assert.equal(true, object.object.isReference());\n            assert.equal('node', object.object.identifier);\n            assert.equal(1, object.args.length);\n            assert.equal(true, object.args[0].isIntegerLiteral());\n            assert.equal('42', object.args[0].value);\n\n            assert.equal(1, expression.args.length);\n            assert.equal(true, expression.args[0].isStringLiteral());\n            assert.equal('\"Hello\"', expression.args[0].value);\n        });\n    });\n\n    describe('#parseFunction', () => {\n\n        it('should parse a function definition', () => {\n            let parser = new Parser('func max(a: Int, b: Int): Int = {' +\n                'if (a > b) a else b' +\n                '}');\n\n            let func = parser.parseFunction();\n\n            assert.equal(true, func.isFunction());\n\n            assert.equal('max', func.name);\n\n            var parameters = func.parameters;\n\n            assert.equal(2, parameters.length);\n\n            assert.equal('a', parameters[0].identifier);\n            assert.equal('Int', parameters[0].type);\n            assert.equal('b', parameters[1].identifier);\n            assert.equal('Int', parameters[1].type);\n\n            assert.equal('Int', func.returnType);\n\n            var body = func.body;\n\n            assert.equal(true, body.isBlock());\n\n            var expressions = body.expressions;\n\n            assert.equal(1, expressions.length);\n\n            assert.equal(true, expressions[0].isIfElse());\n        });\n    });\n\n    describe('#parseClass', () => {\n\n        it('should parse a class definition', () => {\n            let parser = new Parser('class Fraction(n: Int, d: Int) {\\n' +\n                'var num: Int = n\\n' +\n                '' +\n                'var den: Int = d\\n' +\n                '' +\n                'func gcd(): Int = {\\n' +\n                '    let a = num, b = den in {\\n' +\n                '        if (b == 0) a else gcd(b, a % b)\\n' +\n                '    }\\n' +\n                '}\\n' +\n                '' +\n                'override func toString(): String = n.toString() + \"/\" + d.toString()' +\n            '}');\n\n            let klass = parser.parseClass();\n\n            assert.equal('Fraction', klass.name);\n\n            let parameters = klass.parameters;\n\n            assert.equal(2, parameters.length);\n\n            assert.equal('n', parameters[0].identifier);\n            assert.equal('Int', parameters[0].type);\n\n            assert.equal('d', parameters[1].identifier);\n            assert.equal('Int', parameters[1].type);\n\n            let variables = klass.properties;\n\n            assert.equal(2, variables.length);\n\n            assert.equal('num', variables[0].name);\n            assert.equal('Int', variables[0].type);\n            assert.equal(true, variables[0].value.isReference());\n            assert.equal('n', variables[0].value.identifier);\n\n            assert.equal('den', variables[1].name);\n            assert.equal('Int', variables[1].type);\n            assert.equal(true, variables[1].value.isReference());\n            assert.equal('d', variables[1].value.identifier);\n\n            let functions = klass.functions;\n\n            assert.equal(2, functions.length);\n\n            assert.equal('gcd', functions[0].name);\n            assert.equal('toString', functions[1].name);\n            assert.equal(true, functions[1].override);\n        });\n    });\n\n    describe('#parseProgram', () => {\n\n        it('should parse multiple class definitions', () => {\n            let parser = new Parser(\n            'class Fraction(n: Int, d: Int) {\\n' +\n                'var num: Int = n\\n' +\n                '' +\n                'var den: Int = d\\n' +\n                '' +\n                'func gcd(): Int = {\\n' +\n                '    let a = num, b = den in {\\n' +\n                '        if (b == 0) a else gcd(b, a % b)\\n' +\n                '    }\\n' +\n                '}\\n' +\n                '' +\n                'override func toString(): String = n.toString() + \"/\" + d.toString()' +\n            '}\\n' +\n            '\\n' +\n            'class Complex(a: Double, b: Double) {\\n' +\n                'var x: Double = a\\n' +\n                '' +\n                'var y: Double = b\\n' +\n                '' +\n                'override func toString(): String = x.toString() + \" + \" + b.toString() + \"i\"' +\n            '}');\n\n            var program = parser.parseProgram();\n\n            assert.equal(2, program.classesCount());\n\n            let fraction = program.classes[0];\n\n            assert.equal('Fraction', fraction.name);\n\n            let fractionParameters = fraction.parameters;\n\n            assert.equal(2, fractionParameters.length);\n\n            assert.equal('n', fractionParameters[0].identifier);\n            assert.equal('Int', fractionParameters[0].type);\n\n            assert.equal('d', fractionParameters[1].identifier);\n            assert.equal('Int', fractionParameters[1].type);\n\n            let fractionVariables = fraction.properties;\n\n            assert.equal(2, fractionVariables.length);\n\n            assert.equal('num', fractionVariables[0].name);\n            assert.equal('Int', fractionVariables[0].type);\n            assert.equal(true, fractionVariables[0].value.isReference());\n            assert.equal('n', fractionVariables[0].value.identifier);\n\n            assert.equal('den', fractionVariables[1].name);\n            assert.equal('Int', fractionVariables[1].type);\n            assert.equal(true, fractionVariables[1].value.isReference());\n            assert.equal('d', fractionVariables[1].value.identifier);\n\n            let fractionFunctions = fraction.functions;\n\n            assert.equal(2, fractionFunctions.length);\n\n            assert.equal('gcd', fractionFunctions[0].name);\n            assert.equal('toString', fractionFunctions[1].name);\n            assert.equal(true, fractionFunctions[1].override);\n\n            let complex = program.classes[1];\n\n            assert.equal('Complex', complex.name);\n\n            let complexParameters = complex.parameters;\n\n            assert.equal(2, complexParameters.length);\n\n            assert.equal('a', complexParameters[0].identifier);\n            assert.equal('Double', complexParameters[0].type);\n\n            assert.equal('b', complexParameters[1].identifier);\n            assert.equal('Double', complexParameters[1].type);\n\n            let complexVariables = complex.properties;\n\n            assert.equal(2, complexVariables.length);\n\n            assert.equal('x', complexVariables[0].name);\n            assert.equal('Double', complexVariables[0].type);\n            assert.equal(true, complexVariables[0].value.isReference());\n            assert.equal('a', complexVariables[0].value.identifier);\n\n            assert.equal('y', complexVariables[1].name);\n            assert.equal('Double', complexVariables[1].type);\n            assert.equal(true, complexVariables[1].value.isReference());\n            assert.equal('b', complexVariables[1].value.identifier);\n\n            let complexFunctions = complex.functions;\n\n            assert.equal(1, complexFunctions.length);\n\n            assert.equal('toString', complexFunctions[0].name);\n            assert.equal(true, complexFunctions[0].override);\n\n        });\n    });\n\n});"]}