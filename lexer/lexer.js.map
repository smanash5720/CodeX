{"version":3,"sources":["../../../src/main/lexer/lexer.js"],"names":["Lexer","input","inputSize","length","buffer","position","line","column","tokens","token","nextToken","type","TokenType","EndOfInput","push","pop","readToken","skipWhitespaces","Token","symbol","charAt","CharUtils","isBeginningOfLiteral","recognizeLiteral","isOperator","recognizeOperator","isDelimiter","recognizeDelimiter","isDot","Dot","isNewline","Newline","Error","Report","error","isLetter","recognizeKeywordOrIdentifier","isBeginningOfIdentifier","recognizeIdentifier","isBeginningOfNumber","recognizeNumber","isBeginningOfString","recognizeString","recognizeKeyword","keywords","Object","keys","filter","key","i","keyword","recognizeToken","offset","value","isIdentifierPart","identifier","Identifier","recognizer","buildNumberRecognizer","run","substring","recognized","includes","Decimal","Integer","buildStringRecognizer","String","LeftBrace","RightBrace","LeftBracket","RightBracket","LeftParen","RightParen","Comma","Colon","lookahead","DoubleEqual","Equal","ModuloEqual","Modulo","PlusEqual","Plus","TimesEqual","Times","GreaterOrEqual","Greater","NotEqual","Not","TildeEqual","Tilde","DollarEqual","Dollar","CaretEqual","Caret","And","Or","Div","DivEqual","skipUntilNewline","Less","LessOrEqual","LeftArrow","Minus","MinusEqual","RightArrow","Fsm","states","Set","startState","finalStates","transition","state","isStringDelimiter","isEscapeCharacter","isEndOfEscapeSequence","InvalidFsmState","isDigit","isExponentSymbol","isWhitespace"],"mappings":"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","file":"lexer.js","sourcesContent":["import { CharUtils } from '../util/charutils'\nimport { InvalidFsmState, Fsm } from './fsm/fsm'\nimport { Report } from '../util/report'\nimport { Token } from './token'\nimport { TokenType } from './tokentype'\n\nexport class Lexer {\n\n    constructor(input) {\n        this.input = input;\n        this.inputSize = input.length;\n        this.buffer = [];\n        this.position = 0;\n        this.line = 0;\n        this.column = 0;\n    }\n\n    tokenize() {\n        let tokens = [];\n\n        let token = null;\n\n        do {\n            token = this.nextToken();\n\n            if (token.type === TokenType.EndOfInput) {\n                break;\n            }\n\n            tokens.push(token);\n\n        } while (token.type !== TokenType.EndOfInput);\n\n        return tokens;\n    }\n\n    nextToken() {\n        if (this.buffer.length > 0) {\n            return this.buffer.pop();\n        }\n\n        return this.readToken();\n    }\n\n    lookahead() {\n        var token = this.readToken();\n\n        this.buffer.push(token);\n\n        return token;\n    }\n\n    readToken() {\n        this.skipWhitespaces();\n\n        if (this.position >= this.inputSize) {\n            return new Token(TokenType.EndOfInput);\n        }\n\n        var symbol = this.input.charAt(this.position);\n\n        if (CharUtils.isBeginningOfLiteral(symbol)) {\n            return this.recognizeLiteral();\n        }\n\n        if (CharUtils.isOperator(symbol)) {\n            return this.recognizeOperator();\n        }\n\n        if (CharUtils.isDelimiter(symbol)) {\n            return this.recognizeDelimiter();\n        }\n\n        if (CharUtils.isDot(symbol)) {\n            let column = this.column;\n\n            this.position++;\n            this.column++;\n\n            return new Token(TokenType.Dot, '.', this.line, column);\n        }\n\n        if (CharUtils.isNewline(symbol)) {\n            let line = this.line;\n            let column = this.column;\n\n            this.position++;\n            this.line++;\n            this.column = 0;\n\n            return new Token(TokenType.Newline, '\\n', line, column);\n        }\n\n        throw new Error(Report.error(this.line, this.column, `Unrecognized token '${symbol}'.`));\n    }\n\n    recognizeLiteral() {\n        let symbol = this.input.charAt(this.position);\n\n        if (CharUtils.isLetter(symbol)) {\n            return this.recognizeKeywordOrIdentifier();\n        }\n\n        if (CharUtils.isBeginningOfIdentifier(symbol)) {\n            return this.recognizeIdentifier();\n        }\n\n        if (CharUtils.isBeginningOfNumber(symbol)) {\n            return this.recognizeNumber();\n        }\n\n        if (CharUtils.isBeginningOfString(symbol)) {\n            return this.recognizeString();\n        }\n\n        throw new Error(Report.error(this.line, this.column, `Unrecognized token '${symbol}'.`));\n    }\n\n    recognizeKeywordOrIdentifier() {\n        let token = this.recognizeKeyword();\n\n        return token !== null ? token : this.recognizeIdentifier();\n    }\n\n    recognizeKeyword() {\n        let symbol = this.input.charAt(this.position);\n\n        let keywords = Object.keys(TokenType).filter(key => TokenType[key].charAt(0) === symbol);\n\n        for (let i in keywords) {\n            let keyword = keywords[i];\n\n            let token = this.recognizeToken(TokenType[keyword]);\n\n            if (token !== null) {\n                let offset = token.value.length;\n\n                if (CharUtils.isIdentifierPart(this.input.charAt(this.position + offset))) {\n                    return null;\n                }\n\n                this.position += offset;\n                this.column += offset;\n\n                return token;\n            }\n        }\n\n        return null;\n    }\n\n    recognizeIdentifier() {\n        let identifier = '';\n\n        while (this.position < this.inputSize) {\n            let symbol = this.input.charAt(this.position);\n\n            if (!CharUtils.isIdentifierPart(symbol)) {\n                break;\n            }\n\n            identifier += symbol;\n\n            this.position++;\n        }\n\n        let column = this.column;\n\n        this.column += identifier.length;\n\n        return new Token(TokenType.Identifier, identifier, this.line, column);\n    }\n\n    recognizeNumber() {\n        let recognizer = this.buildNumberRecognizer();\n\n        let { recognized, value } = recognizer.run(this.input.substring(this.position));\n\n        if (!recognized) {\n            throw new Error(Report.error(this.line, this.column, 'Unrecognized number literal.'));\n        }\n\n        if (this.input.charAt(this.position) === '.' && value === '.') {\n            this.position++;\n            this.column++;\n\n            return new Token(TokenType.Dot, '.', this.line, this.column - 1);\n        }\n\n        let offset = value.length;\n\n        if (value.charAt(offset - 1) === '.') {\n            value = value.substring(0, offset - 1);\n            offset--;\n        }\n\n        let column = this.column;\n\n        this.position += offset;\n        this.column += offset;\n\n        return new Token(value.includes('.') || value.includes('e') || value.includes('E') ? TokenType.Decimal : TokenType.Integer, value, this.line, column);\n    }\n\n    recognizeString() {\n        let recognizer = this.buildStringRecognizer();\n\n        let { recognized, value } = recognizer.run(this.input.substring(this.position));\n\n        if (!recognized) {\n            throw new Error(Report.error(this.line, this.column, 'Invalid string literal.'));\n        }\n\n        let offset = value.length;\n        let column = this.column;\n\n        this.position += offset;\n        this.column += offset;\n\n        return new Token(TokenType.String, value, this.line, column);\n    }\n\n    recognizeToken(token) {\n        let length = token.length;\n\n        for (let i = 0; i < length; ++i) {\n            if (this.input.charAt(this.position + i) !== token.charAt(i)) {\n                return null;\n            }\n        }\n\n        return new Token(token, token, this.line, this.column);\n    }\n\n    recognizeDelimiter() {\n        let symbol = this.input.charAt(this.position);\n\n        let column = this.column;\n\n        this.position++;\n        this.column++;\n\n        switch (symbol) {\n            case '{':\n                return new Token(TokenType.LeftBrace, '{', this.line, column);\n\n            case '}':\n                return new Token(TokenType.RightBrace, '}', this.line, column);\n\n            case '[':\n                return new Token(TokenType.LeftBracket, '[', this.line, column);\n\n            case ']':\n                return new Token(TokenType.RightBracket, ']', this.line, column);\n\n            case '(':\n                return new Token(TokenType.LeftParen, '(', this.line, column);\n\n            case ')':\n                return new Token(TokenType.RightParen, ')', this.line, column);\n\n            case ',':\n                return new Token(TokenType.Comma, ',', this.line, column);\n\n            case ':':\n                return new Token(TokenType.Colon, ':', this.line, column);\n\n            default:\n                throw new Error(Report.error(this.line, this.column, `Unrecognized token '${symbol}'.`));\n        }\n    }\n\n    recognizeOperator() {\n        let symbol = this.input.charAt(this.position);\n        let lookahead = this.position + 1 < this.inputSize ? this.input.charAt(this.position + 1) : null;\n        let column = this.column;\n\n        if (lookahead !== null && (lookahead === '=' || lookahead === '&' || lookahead === '|' || lookahead === '-')) {\n            this.position++;\n            this.column++;\n        }\n\n        this.position++;\n        this.column++;\n\n        switch (symbol) {\n            case '=':\n                return lookahead !== null && lookahead === '='\n                    ? new Token(TokenType.DoubleEqual, '==', this.line, column)\n                    : new Token(TokenType.Equal, '=', this.line, column);\n\n            case '%':\n                return lookahead !== null && lookahead === '='\n                    ? new Token(TokenType.ModuloEqual, '%=', this.line, column)\n                    : new Token(TokenType.Modulo, '%', this.line, column);\n\n            case '+':\n                return lookahead !== null && lookahead === '='\n                    ? new Token(TokenType.PlusEqual, '+=', this.line, column)\n                    : new Token(TokenType.Plus, '+', this.line, column);\n\n            case '*':\n                return lookahead !== null && lookahead === '='\n                    ? new Token(TokenType.TimesEqual, '*=', this.line, column)\n                    : new Token(TokenType.Times, '*', this.line, column);\n\n            case '>':\n                return lookahead !== null && lookahead === '='\n                    ? new Token(TokenType.GreaterOrEqual, '>=', this.line, column)\n                    : new Token(TokenType.Greater, '>', this.line, column);\n\n            case '!':\n                return lookahead !== null && lookahead === '='\n                    ? new Token(TokenType.NotEqual, '!=', this.line, column)\n                    : new Token(TokenType.Not, '!', this.line, column);\n\n            case '~':\n                return lookahead !== null && lookahead === '='\n                    ? new Token(TokenType.TildeEqual, '~=', this.line, column)\n                    : new Token(TokenType.Tilde, '~', this.line, column);\n\n            case '$':\n                return lookahead !== null && lookahead === '='\n                    ? new Token(TokenType.DollarEqual, '$=', this.line, column)\n                    : new Token(TokenType.Dollar, '$', this.line, column);\n\n            case '^':\n                return lookahead !== null && lookahead === '='\n                    ? new Token(TokenType.CaretEqual, '^=', this.line, column)\n                    : new Token(TokenType.Caret, '^', this.line, column);\n\n            case '&':\n                if (lookahead !== null && lookahead === '&') {\n                    return new Token(TokenType.And, '&&', this.line, column);\n                }\n\n                throw new Error(Report.error(this.line, this.column, `Unrecognized token '${symbol}'.`));\n\n            case '|':\n                if (lookahead !== null && lookahead === '|') {\n                    return new Token(TokenType.Or, '||', this.line, column);\n                }\n\n                throw new Error(Report.error(this.line, this.column, `Unrecognized token '${symbol}'.`));\n\n            case '/':\n                if (lookahead !== '=' && lookahead !== '/') {\n                    return new Token(TokenType.Div, '/', this.line, column);\n                }\n\n                if (lookahead === '=') {\n                    return new Token(TokenType.DivEqual, '/=', this.line, column);\n                }\n\n                if (lookahead === '/') {\n                    this.skipUntilNewline();\n\n                    return this.nextToken();\n                }\n\n                break;\n\n            case '<':\n                if (lookahead !== '=' && lookahead !== '-') {\n                    return new Token(TokenType.Less, '<', this.line, column);\n                }\n\n                if (lookahead === '=') {\n                    return new Token(TokenType.LessOrEqual, '<=', this.line, column);\n                }\n\n                if (lookahead === '-') {\n                    return new Token(TokenType.LeftArrow, '<-', this.line, column);\n                }\n\n                break;\n\n\n            case '-':\n                if (lookahead === null || (lookahead !== '=' && lookahead !== '>')) {\n                    return new Token(TokenType.Minus, '-', this.line, column);\n                }\n\n                if (lookahead === '=') {\n                    return new Token(TokenType.MinusEqual, '-=', this.line, column);\n                }\n\n                if (lookahead === '>') {\n                    return new Token(TokenType.RightArrow, '->', this.line, column);\n                }\n\n                throw new Error(Report.error(this.line, this.column, `Unrecognized token '${symbol}'.`));\n\n            default:\n                throw new Error(Report.error(this.line, this.column, `Unrecognized token '${symbol}'.`));\n        }\n    }\n\n    buildStringRecognizer() {\n        let recognizer = new Fsm();\n\n        recognizer.states = new Set(['Start', 'StartString', 'Character', 'Backslash', 'EscapeSequence', 'EndString']);\n\n        recognizer.startState = 'Start';\n\n        recognizer.finalStates = new Set(['EndString']);\n\n        recognizer.transition = (state, symbol) => {\n            switch (state) {\n                case 'Start':\n                    if (CharUtils.isStringDelimiter(symbol)) {\n                        return 'StartString';\n                    }\n                    break;\n\n                case 'StartString':\n                case 'Character':\n                    if (CharUtils.isStringDelimiter(symbol)) {\n                        return 'EndString';\n                    }\n\n                    if (CharUtils.isEscapeCharacter(symbol)) {\n                        return 'Backslash';\n                    }\n\n                    return 'Character';\n\n                case 'Backslash':\n                    if (CharUtils.isEndOfEscapeSequence(symbol)) {\n                        return 'EscapeSequence';\n                    }\n                    break;\n\n                case 'EscapeSequence':\n                    if (CharUtils.isStringDelimiter(symbol)) {\n                        return 'EndString';\n                    }\n\n                    if (CharUtils.isEscapeCharacter(symbol)) {\n                        return 'Backslash';\n                    }\n\n                    return 'Character';\n\n                default:\n                    break;\n            }\n\n            return InvalidFsmState;\n        };\n\n        return recognizer;\n    }\n\n    buildNumberRecognizer() {\n        let recognizer = new Fsm();\n\n        recognizer.states = new Set(['Start', 'Zero', 'Integer', 'StartDecimal', 'Decimal', 'StartExponentNotation', 'NumberInExponentNotation', 'End']);\n\n        recognizer.startState = 'Start';\n\n        recognizer.finalStates = new Set(['Zero', 'Integer', 'StartDecimal', 'Decimal', 'NumberInExponentNotation', 'End']);\n\n        recognizer.transition = (state, symbol) => {\n            switch (state) {\n                case 'Start':\n                    if (symbol === '0') {\n                        return 'Zero';\n                    }\n\n                    if (symbol === '.') {\n                        return 'StartDecimal';\n                    }\n\n                    if (CharUtils.isDigit(symbol)) {\n                        return 'Integer';\n                    }\n\n                    break;\n\n                case 'Zero':\n                    if (CharUtils.isExponentSymbol(symbol)) {\n                        return 'StartExponentNotation';\n                    }\n\n                    if (symbol == '.') {\n                        return 'StartDecimal';\n                    }\n\n                    break;\n\n                case 'Integer':\n                    if (CharUtils.isDigit(symbol)) {\n                        return 'Integer';\n                    }\n\n                    if (CharUtils.isExponentSymbol(symbol)) {\n                        return 'StartExponentNotation';\n                    }\n\n                    if (symbol == '.') {\n                        return 'StartDecimal';\n                    }\n\n                    break;\n\n                case 'StartDecimal':\n                    if (CharUtils.isDigit(symbol)) {\n                        return 'Decimal';\n                    }\n\n                    return InvalidFsmState;\n\n                case 'StartExponentNotation':\n                    if (CharUtils.isDigit(symbol) || symbol === '-') {\n                        return 'NumberInExponentNotation';\n                    }\n\n                    break;\n\n                case 'Decimal':\n                    if (CharUtils.isDigit(symbol)) {\n                        return 'Decimal';\n                    }\n\n                    if (CharUtils.isExponentSymbol(symbol)) {\n                        return 'StartExponentNotation';\n                    }\n\n                    break;\n\n                case 'NumberInExponentNotation':\n                    if (CharUtils.isDigit(symbol)) {\n                        return 'NumberInExponentNotation';\n                    }\n\n                    break;\n\n                default:\n                    break;\n            }\n\n            return InvalidFsmState;\n        };\n\n        return recognizer;\n    }\n\n    skipWhitespaces() {\n        while (this.position < this.inputSize && CharUtils.isWhitespace(this.input.charAt(this.position))) {\n            this.position++;\n            this.column++;\n        }\n    }\n\n    skipUntilNewline() {\n        while (this.position < this.inputSize && !CharUtils.isNewline(this.input.charAt(this.position))) {\n            this.position++;\n            this.column++;\n        }\n    }\n}\n"]}