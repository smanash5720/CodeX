{"version":3,"sources":["../../../src/main/semanticanalysis/symboltable.js"],"names":["SymbolTable","namespaces","Map","enterNamespace","namespace","has","set","scopes","get","currentScopeIndex","scope","length","push","symbol","identifier","undefined","scopeIndex","splice"],"mappings":";;;;;;;;;;IAAaA,W,WAAAA,W;AAET,2BAAc;AAAA;;AACV,aAAKC,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;AACA,aAAKC,cAAL,CAAoB,SAApB;AACH;;;;uCAEcC,S,EAAW;AACtB,gBAAI,CAAC,KAAKH,UAAL,CAAgBI,GAAhB,CAAoBD,SAApB,CAAL,EAAqC;AACjC,qBAAKH,UAAL,CAAgBK,GAAhB,CAAoBF,SAApB,EAA+B,EAA/B;AACH;;AAED,iBAAKG,MAAL,GAAc,KAAKN,UAAL,CAAgBO,GAAhB,CAAoBJ,SAApB,CAAd;AACA,iBAAKK,iBAAL,GAAyB,CAAC,CAA1B;AACA,iBAAKC,KAAL,GAAa,IAAb;AACH;;;qCAEY;AACT,gBAAI,KAAKD,iBAAL,GAAyB,CAAzB,IAA8B,KAAKF,MAAL,CAAYI,MAA9C,EAAsD;AAClD,qBAAKJ,MAAL,CAAYK,IAAZ,CAAiB,IAAIV,GAAJ,EAAjB;AACH;;AAED,iBAAKQ,KAAL,GAAa,KAAKH,MAAL,CAAY,EAAE,KAAKE,iBAAnB,CAAb;AACH;;;4BAEGI,M,EAAQ;AACR,gBAAI,KAAKH,KAAL,KAAe,IAAnB,EAAyB;AACrB,qBAAKA,KAAL,CAAWJ,GAAX,CAAeO,OAAOC,UAAtB,EAAkCD,MAAlC;AACH;AACJ;;;8BAEKC,U,EAAY;AACd,gBAAI,KAAKJ,KAAL,KAAe,IAAnB,EAAyB;AACrB,uBAAO,KAAP;AACH;;AAED,mBAAO,KAAKA,KAAL,CAAWL,GAAX,CAAeS,UAAf,CAAP;AACH;;;sCAEa;AACV,mBAAO,KAAKP,MAAL,CAAYI,MAAnB;AACH;;;6BAEIG,U,EAAY;AACb,gBAAI,KAAKJ,KAAL,KAAe,IAAnB,EAAyB;AACrB,uBAAOK,SAAP;AACH;;AAED,gBAAIF,SAASE,SAAb;AACA,gBAAIL,QAAQ,KAAKA,KAAjB;AACA,gBAAIM,aAAa,KAAKP,iBAAtB;;AAEA,mBAAOI,WAAWE,SAAX,IAAwBC,cAAc,CAA7C,EAAgD;AAC5CH,yBAASH,MAAMF,GAAN,CAAUM,UAAV,CAAT;AACAJ,wBAAQ,KAAKH,MAAL,CAAY,EAAES,UAAd,CAAR;AACH;;AAED,mBAAOH,MAAP;AACH;;;oCAEW;AACR,iBAAKN,MAAL,CAAYU,MAAZ,CAAmB,KAAKR,iBAAxB,EAA2C,CAA3C;;AAEA,iBAAKC,KAAL,GAAa,EAAE,KAAKD,iBAAP,IAA4B,CAA5B,GAAgC,KAAKF,MAAL,CAAY,KAAKE,iBAAjB,CAAhC,GAAsE,IAAnF;AACH;;;gCAEO;AACJ,iBAAKR,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;AACA,iBAAKC,cAAL,CAAoB,SAApB;AACH","file":"symboltable.js","sourcesContent":["export class SymbolTable {\n\n    constructor() {\n        this.namespaces = new Map();\n        this.enterNamespace('default');\n    }\n\n    enterNamespace(namespace) {\n        if (!this.namespaces.has(namespace)) {\n            this.namespaces.set(namespace, []);\n        }\n\n        this.scopes = this.namespaces.get(namespace);\n        this.currentScopeIndex = -1;\n        this.scope = null;\n    }\n\n    enterScope() {\n        if (this.currentScopeIndex + 1 >= this.scopes.length) {\n            this.scopes.push(new Map());\n        }\n\n        this.scope = this.scopes[++this.currentScopeIndex];\n    }\n\n    add(symbol) {\n        if (this.scope !== null) {\n            this.scope.set(symbol.identifier, symbol);\n        }\n    }\n\n    check(identifier) {\n        if (this.scope === null) {\n            return false;\n        }\n\n        return this.scope.has(identifier);\n    }\n\n    scopesCount() {\n        return this.scopes.length;\n    }\n\n    find(identifier) {\n        if (this.scope === null) {\n            return undefined;\n        }\n\n        let symbol = undefined;\n        let scope = this.scope;\n        let scopeIndex = this.currentScopeIndex;\n\n        while (symbol === undefined && scopeIndex >= 0) {\n            symbol = scope.get(identifier);\n            scope = this.scopes[--scopeIndex];\n        }\n\n        return symbol;\n    }\n\n    exitScope() {\n        this.scopes.splice(this.currentScopeIndex, 1);\n\n        this.scope = --this.currentScopeIndex >= 0 ? this.scopes[this.currentScopeIndex] : null;\n    }\n\n    clear() {\n        this.namespaces = new Map();\n        this.enterNamespace('default');\n    }\n}"]}