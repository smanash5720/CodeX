{"version":3,"sources":["../../../src/main/semanticanalysis/typeenvironment.js"],"names":["TypeEnvironment","classes","Map","symbolTable","SymbolTable","functions","currentClass","klass","set","name","className","has","get","delete","func","push","some","m","equals","functionName","find","classNameA","classNameB","classA","classB","superClass","undefined"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;IAEaA,e,WAAAA,e;AAET,+BAAc;AAAA;;AACV,aAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACA,aAAKC,WAAL,GAAmB,IAAIC,wBAAJ,EAAnB;AACA,aAAKC,SAAL,GAAiB,IAAIH,GAAJ,EAAjB;AACA,aAAKI,YAAL,GAAoB,IAApB;AACH;;;;iCAEQC,K,EAAO;AACZ,iBAAKN,OAAL,CAAaO,GAAb,CAAiBD,MAAME,IAAvB,EAA6BF,KAA7B;AACA,iBAAKF,SAAL,CAAeG,GAAf,CAAmBD,MAAME,IAAzB,EAA+B,EAA/B;AACH;;;iCAEQC,S,EAAW;AAChB,mBAAO,KAAKT,OAAL,CAAaU,GAAb,CAAiBD,SAAjB,CAAP;AACH;;;iCAEQA,S,EAAW;AAChB,mBAAO,KAAKT,OAAL,CAAaW,GAAb,CAAiBF,SAAjB,CAAP;AACH;;;oCAEWA,S,EAAW;AACnB,mBAAO,KAAKT,OAAL,CAAaY,MAAb,CAAoBH,SAApB,CAAP;AACH;;;oCAEWA,S,EAAWI,I,EAAM;AACzB,iBAAKT,SAAL,CAAeO,GAAf,CAAmBF,SAAnB,EAA8BK,IAA9B,CAAmCD,IAAnC;AACH;;;oCAEWJ,S,EAAWI,I,EAAM;AACzB,mBAAO,KAAKT,SAAL,CAAeO,GAAf,CAAmBF,SAAnB,EAA8BM,IAA9B,CAAmC,UAACC,CAAD;AAAA,uBAAOA,EAAEC,MAAF,CAASJ,IAAT,CAAP;AAAA,aAAnC,CAAP;AACH;;;oCAEWJ,S,EAAWS,Y,EAAc;AACjC,mBAAO,KAAKd,SAAL,CAAeO,GAAf,CAAmBF,SAAnB,EAA8BU,IAA9B,CAAmC,UAACN,IAAD;AAAA,uBAAUA,KAAKL,IAAL,KAAcU,YAAxB;AAAA,aAAnC,CAAP;AACH;;;gCAEOE,U,EAAYC,U,EAAY;AAC5B,gBAAIC,SAAS,KAAKH,IAAL,CAAUC,UAAV,CAAb;AACA,gBAAIG,SAAS,KAAKJ,IAAL,CAAUE,UAAV,CAAb;;AAEA,eAAG;AACC,oBAAIC,OAAOE,UAAP,KAAsBD,OAAOf,IAAjC,EAAuC;AACnC,2BAAO,IAAP;AACH;;AAED,oBAAIe,OAAOC,UAAP,KAAsBC,SAA1B,EAAqC;AACjC,2BAAO,KAAP;AACH;;AAEDF,yBAAS,KAAKJ,IAAL,CAAUI,OAAOC,UAAjB,CAAT;AAEH,aAXD,QAWSD,WAAWE,SAXpB;;AAaA,mBAAO,KAAP;AACH","file":"typeenvironment.js","sourcesContent":["import { Class } from '../ast/class'\nimport { Function } from '../ast/func'\nimport { SymbolTable } from './symboltable'\nimport { Types } from '../types/types'\n\nexport class TypeEnvironment {\n\n    constructor() {\n        this.classes = new Map();\n        this.symbolTable = new SymbolTable();\n        this.functions = new Map();\n        this.currentClass = null;\n    }\n\n    addClass(klass) {\n        this.classes.set(klass.name, klass);\n        this.functions.set(klass.name, []);\n    }\n\n    hasClass(className) {\n        return this.classes.has(className);\n    }\n\n    getClass(className) {\n        return this.classes.get(className);\n    }\n\n    removeClass(className) {\n        return this.classes.delete(className);\n    }\n\n    addFunction(className, func) {\n        this.functions.get(className).push(func);\n    }\n\n    hasFunction(className, func) {\n        return this.functions.get(className).some((m) => m.equals(func));\n    }\n\n    getFunction(className, functionName) {\n        return this.functions.get(className).find((func) => func.name === functionName);\n    }\n\n    conform(classNameA, classNameB) {\n        let classA = this.find(classNameA);\n        let classB = this.find(classNameB);\n\n        do {\n            if (classA.superClass === classB.name) {\n                return true;\n            }\n\n            if (classB.superClass === undefined) {\n                return false;\n            }\n\n            classB = this.find(classB.superClass);\n\n        } while (classB !== undefined);\n\n        return false;\n    }\n}"]}