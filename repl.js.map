{"version":3,"sources":["../../src/main/repl.js"],"names":["fs","process","readline","Repl","typeEnvironment","TypeEnvironment","context","Context","predefClass","PredefClass","mathClass","MathClass","consoleClass","consoleClass","currentClass","addClass","loadClasses","predef","Obj","create","Types","Predef","math","Math","console","console","self","symbolTable","enterScope","add","Symbol","environment","store","alloc","res","log","prev","input","scanner","createInterface","stdin","output","stdout","setPrompt","prompt","on","line","trim","close","exit","startsWith","runLoadCommand","tryParse","execute","e","message","lexer","Lexer","token","nextToken","type","TokenType","Newline","Class","injectClass","Var","injectProperty","Func","injectFunction","evaluateExpression","parser","Parser","expression","parseExpression","TypeChecker","typeCheck","value","Evaluator","evaluate","identifier","isReference","isAssignment","get","address","String","call","FunctionCall","Reference","object","expressionType","Unit","klass","parseClass","typeCheckClass","removeClass","name","property","parseProperty","index","properties","findIndex","variable","splice","typeCheckProperty","push","evaluateProperty","set","func","parseFunction","functions","f","equals","typeCheckFunction","signature","cmd","args","split","count","length","program","Program","i","classes","concat","loadFile","typeCheckProgram","forEach","filePath","readFileSync","parseProgram","accept","search","objectClass","ObjectClass","boolClass","BoolClass","intClass","IntClass","doubleClass","DoubleClass","stringClass","StringClass","unitClass","UnitClass","nullClass","NullClass"],"mappings":"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","file":"repl.js","sourcesContent":["import * as fs from 'fs'\nimport * as process from 'process'\nimport * as readline from 'readline'\nimport { BinaryExpression } from './ast/binaryexpression'\nimport { BoolClass } from './interpreter/std/bool'\nimport { consoleClass } from './interpreter/std/console'\nimport { Context } from './interpreter/context'\nimport { DoubleClass } from './interpreter/std/double'\nimport { Evaluator } from './interpreter/evaluator'\nimport { Formal } from './ast/formal'\nimport { IntClass } from './interpreter/std/int'\nimport { IntegerLiteral } from './ast/integer'\nimport { Lexer } from './lexer/lexer'\nimport { MathClass } from './interpreter/std/math'\nimport { Function } from './ast/func'\nimport { FunctionCall } from './ast/functioncall'\nimport { NullClass } from './interpreter/std/null'\nimport { Obj } from './interpreter/object'\nimport { ObjectClass } from './interpreter/std/object'\nimport { Parser } from './parser/parser'\nimport { PredefClass } from './interpreter/std/predef'\nimport { Program } from './ast/program'\nimport { Reference } from './ast/reference'\nimport { StringClass } from './interpreter/std/str'\nimport { Symbol } from './semanticanalysis/symbol'\nimport { TokenType } from './lexer/tokentype'\nimport { TypeChecker } from './semanticanalysis/typechecker'\nimport { TypeEnvironment } from './semanticanalysis/typeenvironment'\nimport { Types } from './types/types'\nimport { TypesUtils } from './types/typesutils'\nimport { UnitClass } from './interpreter/std/unit'\n\nexport class Repl {\n\n    constructor() {\n        this.typeEnvironment = new TypeEnvironment();\n        this.context = new Context();\n\n        this.predefClass = new PredefClass();\n        this.mathClass = new MathClass();\n        this.consoleClass = new consoleClass();\n\n        this.typeEnvironment.currentClass = this.predefClass;\n\n        this.typeEnvironment.addClass(this.predefClass);\n        this.typeEnvironment.addClass(this.mathClass);\n        this.typeEnvironment.addClass(this.consoleClass);\n\n        this.context.addClass(this.predefClass);\n        this.context.addClass(this.mathClass);\n        this.context.addClass(this.consoleClass);\n\n        this.loadClasses();\n\n        this.predef = Obj.create(this.context, Types.Predef);\n        this.math = Obj.create(this.context, Types.Math);\n        this.console = Obj.create(this.context, Types.console);\n\n        this.context.self = this.predef;\n\n        this.typeEnvironment.symbolTable.enterScope();\n        this.typeEnvironment.symbolTable.add(new Symbol('Math', Types.Math));\n        this.typeEnvironment.symbolTable.add(new Symbol('console', Types.console));\n\n        this.context.environment.enterScope();\n        this.context.environment.add('Math', this.context.store.alloc(this.math));\n        this.context.environment.add('console', this.context.store.alloc(this.console));\n\n        this.res = 0;\n    }\n\n    run() {\n        console.log('Welcome to CodeX 0.0.1');\n        console.log('Type in expressions to have them evaluated.');\n        console.log('Type :quit to quit.');\n\n        console.log();\n        console.log();\n\n        let prev = ' ';\n\n        let input = '';\n\n        let scanner = readline.createInterface({\n            input: process.stdin,\n            output: process.stdout\n        });\n\n        scanner.setPrompt('CodeX> ');\n\n        scanner.prompt();\n\n        scanner.on('line', (line) => {\n            line = line.trim();\n\n            if (line === ':quit') {\n                scanner.close();\n\n                process.exit();\n\n            } else if (line.startsWith(':load')) {\n                this.runLoadCommand(line, scanner);\n\n            } else {\n\n                if (line === '' && prev === '') {\n                    console.log('Two blank lines typed. Starting a new expression.');\n                    console.log();\n\n                    prev = ' ';\n                    input = '';\n                    scanner.setPrompt('CodeX> ');\n\n                } else {\n                    prev = line;\n\n                    input += line;\n\n                    try {\n                        if (!this.tryParse(input)) {\n                            input += '\\n';\n                            scanner.setPrompt('      | ');\n\n                        } else {\n                            console.log(this.execute(input));\n                            console.log();\n\n                            input = '';\n                            scanner.setPrompt('CodeX> ');\n                        }\n                    } catch (e) {\n                        console.log(`error: ${e.message}`);\n                        console.log();\n\n                        input = '';\n                        scanner.setPrompt('CodeX> ');\n                    }\n                }\n\n                scanner.prompt();\n            }\n        });\n\n        scanner.on('close', () => {\n            console.log();\n            console.log('Thanks for playing around!');\n        });\n    }\n\n    execute(input) {\n        let lexer = new Lexer(input);\n\n        let token = lexer.nextToken();\n\n        while (token.type === TokenType.Newline) {\n            token = lexer.nextToken();\n        }\n\n        switch (token.type) {\n            case TokenType.Class:\n                return this.injectClass(input);\n\n            case TokenType.Var:\n                return this.injectProperty(input);\n\n            case TokenType.Func:\n                return this.injectFunction(input);\n\n            default:\n                return this.evaluateExpression(input);\n        }\n    }\n\n    evaluateExpression(input) {\n        let parser = new Parser(input);\n\n        let expression = parser.parseExpression();\n\n        TypeChecker.typeCheck(this.typeEnvironment, expression);\n\n        let value = Evaluator.evaluate(this.context, expression);\n\n        let identifier;\n\n        if (expression.isReference()) {\n            identifier = expression.identifier;\n\n        } else if (expression.isAssignment()) {\n            identifier = expression.identifier;\n\n            value = this.context.self.get(identifier);\n\n        } else {\n            identifier = `res${this.res++}`;\n\n            this.typeEnvironment.symbolTable.add(new Symbol(identifier, value.type));\n\n            let address = this.context.store.alloc(value);\n\n            this.context.environment.add(identifier, address);\n        }\n\n        if (value.type === Types.String) {\n            return`${identifier}: ${value.type} = \"${value.get('value')}\"`;\n        }\n\n        let call = new FunctionCall(new Reference(identifier), 'toString', []);\n\n        call.object.expressionType = value.type;\n        call.expressionType = Types.String;\n\n        let res = Evaluator.evaluate(this.context, call);\n\n        return value.type === Types.Unit ? '' : `${identifier}: ${value.type} = ${res.get('value')}`;\n    }\n\n    injectClass(input) {\n        let parser = new Parser(input);\n\n        let klass = parser.parseClass();\n\n        this.typeEnvironment.addClass(klass);\n\n        try {\n            TypeChecker.typeCheckClass(this.typeEnvironment, klass);\n\n        } catch (e) {\n            this.typeEnvironment.removeClass(klass.name);\n\n            throw e;\n        }\n\n        this.context.addClass(klass);\n\n        return `defined class ${klass.name}`;\n    }\n\n    injectProperty(input) {\n        let parser = new Parser(input);\n\n        let property = parser.parseProperty();\n\n        let index = this.predefClass.properties.findIndex((variable) => variable.name === property.name);\n        if (index !== -1) {\n            this.predefClass.properties.splice(index, 1);\n        }\n\n        TypeChecker.typeCheckProperty(this.typeEnvironment, property);\n\n        this.predefClass.properties.push(property);\n\n        let value = Evaluator.evaluateProperty(this.context, property);\n        value.address = 'this';\n\n        this.predef.properties.set(property.name, value);\n\n        let call = new FunctionCall(new Reference(property.name), 'toString', []);\n\n        let res = Evaluator.evaluate(this.context, call);\n\n        return `${property.name}: ${property.type} = ${res.get('value')}`;\n    }\n\n    injectFunction(input) {\n        let parser = new Parser(input);\n\n        let func = parser.parseFunction();\n\n        let index = this.predefClass.functions.findIndex((f) => func.equals(f));\n        if (index !== -1) {\n            this.predefClass.functions.splice(index, 1);\n        }\n\n        index = this.predef.functions.findIndex((f) => func.equals(f));\n        if (index !== -1) {\n            this.predef.functions.splice(index, 1);\n        }\n\n        this.predefClass.functions.push(func);\n\n        this.predef.functions.push(func);\n\n        TypeChecker.typeCheckFunction(this.typeEnvironment, func);\n\n        return func.signature();\n    }\n\n    runLoadCommand(cmd, scanner) {\n        let args = cmd.split(/\\s+/);\n        let count = args.length;\n\n        if (count <= 1) {\n            console.log('error: no file provided.');\n            console.log();\n\n        } else {\n            try {\n                let program = new Program();\n\n                for (let i = 1; i < count; ++i) {\n                    program.classes = program.classes.concat(this.loadFile(args[i]).classes);\n                }\n\n                TypeChecker.typeCheckProgram(this.typeEnvironment, program);\n\n                this.typeEnvironment.symbolTable.enterScope();\n\n                program.classes.forEach((klass) => {\n                    this.context.addClass(klass);\n\n                    console.log(`defined class ${klass.name}.`);\n                });\n\n                console.log();\n\n            } catch (e) {\n                console.log(`error: ${e.message}`);\n                console.log();\n            }\n        }\n\n        scanner.prompt();\n    }\n\n    loadFile(filePath) {\n        let parser = new Parser(fs.readFileSync(filePath, 'utf-8'));\n\n        return parser.parseProgram();\n    }\n\n    tryParse(input) {\n        let parser = new Parser(input);\n\n        try {\n            if (parser.accept(TokenType.Class)) {\n                parser.parseClass();\n\n            } else if (parser.accept(TokenType.Var)) {\n                parser.parseProperty();\n\n            } else if (parser.accept(TokenType.Func)) {\n                parser.parseFunction();\n\n            } else {\n                parser.parseExpression();\n            }\n\n            return true;\n        } catch (e) {\n            if (e.message.search('end of input.') > 0) {\n                return false;\n            } else {\n                throw e;\n            }\n        }\n    }\n\n    loadClasses() {\n        let objectClass = new ObjectClass();\n        let boolClass = new BoolClass();\n        let intClass = new IntClass();\n        let doubleClass = new DoubleClass();\n        let stringClass = new StringClass();\n        let unitClass = new UnitClass();\n        let nullClass = new NullClass();\n        let mathClass = new MathClass();\n\n        this.typeEnvironment.addClass(objectClass);\n        this.typeEnvironment.addClass(boolClass);\n        this.typeEnvironment.addClass(intClass);\n        this.typeEnvironment.addClass(doubleClass);\n        this.typeEnvironment.addClass(stringClass);\n        this.typeEnvironment.addClass(unitClass);\n        this.typeEnvironment.addClass(nullClass);\n        this.typeEnvironment.addClass(mathClass);\n\n        this.context.addClass(objectClass);\n        this.context.addClass(boolClass);\n        this.context.addClass(intClass);\n        this.context.addClass(doubleClass);\n        this.context.addClass(stringClass);\n        this.context.addClass(unitClass);\n        this.context.addClass(nullClass);\n        this.context.addClass(mathClass);\n    }\n}"]}